Practise 1

lst = [10, -4, 11, 29]
#(a) What expression represents the very first element of lst?
print(lst[0])
#(b) What expression represents the very last element of lst?
print(lst[-1])
#(c) What is lst[0]?
print(lst[0])
#(d) What is lst[3]?
print(lst[3])
#(e) What is lst[1]?
print(lst[1])
#(f) What is lst[-1]?
print(lst[-1])
#(g) What is lst[-4]?
print(lst[-4])
#(h) Is the expression lst[3.0] legal or illegal?
print("illegal")


Practis 2

by the negative index ,we can fix the elements of the list from the bottom.

Practis3

B = [45, -3, 16, 8]


Practis 4

 Given the statement: lst = [10, -4, 11, 29]
(a) What expression represents the very first element of lst? ==> lst[0] and lst[-4]
(b) What expression represents the very last element of lst? ==> lst[3] and lst[-1]
(c) What is lst[0]? ==> 10
(d) What is lst[3]? ==> 29
(e) What is lst[1]? ==> -4
(f) What is lst[-1]? ==> 29
(g) What is lst[-4]? ==> 10
(h) Is the expression lst[3.0] legal or illegal? ==> illegal becuse list indices must be integers or slices, not float !


Practis 5

lst = [3, 0, 1, 5, 2]
x = 2

#(a) lst[0]?
print(3)
#(b) lst[3]?
print(5)
#(c) lst[x]?
print(1)
#(d) lst[-x]?
print(5)
#(e) lst[x + 1]?
print(5)
#(f) lst[x] + 1?
print(1+1)
#(g) lst[lst[x]]?
print(0)
#(h) lst[lst[lst[x]]]?
print(3)


Practis 6

a = [1,2,3]
print(len(a))


Practis 7

a = []


Practis 8

lst = [20, 1, -34, 40, -8, 60, 1, 3]
print(lst)
print(lst[0:3])
print(lst[4:8])
print(lst[4:33])
print(lst[-5:-3])
print(lst[-22:3])
print(lst[4:])
print(lst[:])
print(lst[:4])
print(lst[1:5])
print(-34 in lst)
print(-34 not in lst)
print(len(lst))


Practis 9
An assignment statement containing the expression a[m:n] on the left side and a list on the right
side can modify list a. Complete the following table by supplying the m and n values in the slice
assignment statement needed to produce the indicated list from the given original list.
A = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] ==> A[0:5] ==> [2, 4, 6, 8, 10]
A = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10] ==> A[6:11] ==> [2, 4, 6, 8, 10]
A = [2, 3, 4, 5, 6, 7, 8, 10] ==> A[0:7:2] + A[7:] ==>! [2, 4, 6, 8, 10]
A = [2, 4, 6, 'a', 'b', 'c', 8, 10] ==> A[0:3] + A[6:] ==> [2, 4, 6, 8, 10]
A = [2, 4, 6, 8, 10] ==> A[0:5] ==> [2, 4, 6, 8, 10]
A = [] ==> IMPOSSIBLE !! HOWEVER => A[0:] + [2, 4, 6, 8, 10] ==> [2, 4, 6, 8, 10]
A = [10, 8, 6, 4, 2] ==> A[-1:-6:-1] ==> [2, 4, 6, 8, 10]
A = [2, 4, 6] ==> IMPOSSIBLE !! HOWEVER => A[0:4] + [8, 10] ==> [2, 4, 6, 8, 10]
A = [6, 8, 10] ==> IMPOSSIBLE !! HOWEVER => [2, 4] + A[0:4] ==> [2, 4, 6, 8, 10]
A = [2, 10] ==> IMPOSSIBLE !! HOWEVER => A[0:1] + [4, 6, 8] + A[1:2] ==> [2, 4, 6, 8, 10]
A = [4, 6, 8] ==> IMPOSSIBLE !! HOWEVER => [2] + A[0:3] + [10] ==> [2, 4, 6, 8, 10]"""


Practis 10

lines (10 sloc)  244 Bytes
#(a) [8] * 4
a=[8,8,8,8]
#(b) 6 * [2, 7]
b=[2,7,2,7,2,7,2,7,2,7,2,7]
#(c) [1, 2, 3] + ['a', 'b', 'c', 'd']
c=[1,2,3,'a','b','c','d']
#(d) 3 * [1, 2] + [4, 2]
d=[1,2,1,2,1,2,4,2]
#(e) 3 * ([1, 2] + [4, 2])
e=[1, 2, 4, 2, 1, 2, 4, 2, 1, 2, 4, 2]


Practis 11
a=[x + 1 for x in [2, 4, 6, 8]]
a=[3,4,7,9]
#b= [10*x for x in range(5, 10)]
b=[50, 60, 70, 80, 90]
#c= [x for x in range(10, 21) if x % 3 == 0]
c=[12,15,18]
#d= [(x, y) for x in range(3) for y in r
d=[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
#e= [(x, y) for x in range(3) for y in range(4) if (x + y) % 2 == 0]
e=(0, 0), (0, 2), (1, 1), (1, 3), (2, 0), (2, 2)]


Practis 12

#(a) [1, 4, 9, 16, 25]
a=[x**2  for x in range(1,6)]
#(b) [0.25, 0.5, 0.75, 1.0, 1.25. 1.5]
b=[x+0.25 for x in range(0,0.25,0.5,0.75,1.0,1.25)]
#(c) [('a', 0), ('a', 1), ('a', 2), ('b', 0), ('b', 1), ('b', 2)]
[(x, y) for x in ('a', 'b') for y in range(0, 3)]


Practis 13

lst1 = [1, 2, 3, 'x']
lst2 = [11, 12, 13]
print('x' in lst1)
print(50 in lst2)

Practis 14
st = [1, 2, 3]
print(lst[::-1])


Practis 15

def sum_passetive(x):
    sum=0
    for i in sum_passetive(x):
        if i>0:
            sum=sum+i
            print(sum)

Practis 16

lst = [3,5,4,-1,0]
def count_evens(lst):
    sum_evens=0
    for x in lst:
        if x%2==0:
            sum=sum_evens+1
            print(sum)
count_evens(lst)


Practis 17

lst = [1, 2, 3, 4, 5, 6]
num = 2
def print_big_enough(lst, num):
    sliced_lst = []
    for i in lst:
        if i >= num:
            sliced_lst += [i]

    print(sliced_lst)

print_big_enough(lst, num)

Practis 18


def next_number(lst):
    mymax = 0
    num = 0
    for i in lst:
        if i > mymax:
            mymax = i

    for i in range(1, mymax + 1):
        if i not in lst:
            return i
    return mymax + 1
print(next_number(lst))


Practis 19

ylist = ['mobina ', 'daemi', 2000, 2022]
def reverse(mylist):
    mylist2 = []
    for item in mylist:
        mylist2.insert(0, item)
    return mylist2

print(reverse(mylist))


Practis 20

def matrix(satr,sotoon):
    result = []
    for i in range(satr):
        partial_result = []
        for i in range(sotoon):
            partial_result.append(1)
        result.append(partial_result) 
     return result
m = matrix(6, 9)
for i in m:
    print(i)

m = matrix(6, 9)
for i in m:
    print(i)


Practis 21

def Q21():
    # 1st way
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    # 2nd way
    lst = [x for x in range(1, 11)]
    #3rd way
    lst = list(range(1, 11))
    #4th way
    lst = list()
    for i in range(1,11):
        lst.append(i)
    #5th way
    lst = [0] * 10
    for i in range(1, 11):
        lst[i-1] = i


Practis 22

def Q22(m):
    new_mat = [[0] * len(m)] * len(m)
    for i in range(len(m)):
        for j in range(len(m[0])):
            new_mat[j][i] = m[i][j]
    flag = 0
    for i in range(len(m)):
        for j in range(len(m)):
            if m[i] == new_mat[j]:
                flag = 1
    if flag:
        return True
    else:
        return False


Practis 23

def check_winner(m):
    new_mat = [[0] * len(m)] * len(m)
    for i in range(len(m)):
        for j in range(len(m[0])):
            new_mat[j][i] = m[i][j]
    for i in m:
        if i[0] == i[1] == i[2] == 'X':
            return 'X'
        elif i[0] == i[1] == i[2] == 'O':
            return 'O'
    for i in new_mat:
        if i[0] == i[1] == i[2] == 'X':
            return 'X'
        elif i[0] == i[1] == i[2] == 'O':
            return 'O'
    if m[0][0] == m[1][1] == m[2][2] == 'X':
        return 'X'
